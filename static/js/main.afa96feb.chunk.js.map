{"version":3,"sources":["amex_logo.png","michelin_logo.png","About.js","ExperienceCard.js","Experience.js","Connect.js","Portfolio.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","About","react_default","a","createElement","className","Component","ExperienceCard","lib","l","header","reveal","image","amex","waves","title","this","props","date","Experience","experience","experiences","map","item","index","src_ExperienceCard","key","logo","Connect","Portfolio","src_About","src_Experience","src_Connect","NavBar","brand","href","left","App","src_NavBar","src_Portfolio","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afa96feb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/amex_logo.89a62e9b.png\";","module.exports = __webpack_public_path__ + \"static/media/michelin_logo.aa43e459.png\";","import React, {Component} from 'react';\n\nclass About extends Component {\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"about\">\n\t\t\t\t<section>\n\t\t\t\t\t<h1>About Me</h1>\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<p><b>Name:</b> Stephanie</p>\n\t\t\t\t\t<p>Heres a little blurb about me and stuff yeah</p>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default About; ","import React, {Component} from 'react'; \nimport {Card, CardTitle, Col} from 'react-materialize';\nimport amex from './amex_logo.png';\nimport michelin from './michelin_logo.png';\n\nclass ExperienceCard extends Component {\n\trender() {\n\t\treturn(\n\t\t\t<Col l={6}>\n\t\t\t\t<Card header={<CardTitle reveal image={amex} waves='light'/>}\n\t\t\t\t    title={this.props.title}\n\t\t\t\t    reveal={this.props.reveal}>\n\t\t\t\t    <p>{this.props.date}</p>\n\t\t\t\t</Card>\n\t\t\t</Col>\n\t\t);\n\t}\n}\n\nexport default ExperienceCard; ","import React, {Component} from 'react';\nimport ExperienceCard from './ExperienceCard.js';\nimport experience from './experience.json';\n\nclass Experience extends Component {\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"experience\">\n\t\t\t\t<main>\n\t\t\t\t\t<section><h1>Experience</h1></section>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t{experience.experiences.map((item, index) => {\n\t\t\t\t\t\t\treturn <ExperienceCard key={index} title={item.title} reveal={item.reveal} date={item.date} logo={item.logo}/>\n\t\t\t\t\t\t})}\n\t\t\t\t\t</section>\n\t\t\t\t\t<br/>\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Experience;","import React, {Component} from 'react';\n\nclass Connect extends Component {\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<main>\n\t\t\t\t\t<section><h1>Connect</h1></section>\n\t\t\t\t\t<section><h3>GitHub / Bitbucket </h3></section>\n\t\t\t\t\t<section><h3>LinkedIn</h3></section>\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default Connect;","import React, {Component} from 'react';\nimport About from './About.js';\nimport Experience from './Experience.js';\nimport Connect from './Connect.js';\n\nclass Portfolio extends Component {\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<section><About/></section>\n\t\t\t\t<section><Experience/></section>\n\t\t\t\t<section><Connect/></section>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Portfolio;","import React, {Component} from 'react';\nimport {Navbar, NavItem} from 'react-materialize';\n\nclass NavBar extends Component {\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<Navbar brand='exscruzme' href='#' left className=\"navbar\">\n\t\t\t\t  <NavItem href='#'>Home</NavItem>\n\t\t\t\t  <NavItem href='#'>Experience</NavItem>\n\t\t\t\t  <NavItem href='#'>Connect</NavItem>\n\t\t\t\t  <NavItem href='#'>Fun Stuff</NavItem>\n\t\t\t\t</Navbar>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport {Row, Col} from 'react-materialize';\nimport Portfolio from './Portfolio.js';\nimport NavBar from './NavBar.js';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Row><Col l={12}><NavBar/></Col></Row>\n        <Row className=\"App\"><Col l={12}><Portfolio/></Col></Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}